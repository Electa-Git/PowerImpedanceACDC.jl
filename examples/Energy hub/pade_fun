using DelimitedFiles
using SymEngine
using Plots
using LinearAlgebra
using ControlSystemsBase, RobustAndOptimalControl

function timeDelayPadeMatrices(padeOrderNum,padeOrderDen,t_delay,numberVars)

    size_A=padeOrderDen;
    a_k=factorial(padeOrderNum);
    b_l=((factorial(padeOrderDen)*(-1)^padeOrderNum)*(t_delay^(padeOrderNum-padeOrderDen)))/a_k;
    Ad=zeros(size_A,size_A);
    Bd=zeros(size_A,1);
    Bd[end]=1;
    Cd=zeros(1,size_A);
    Dd=b_l;
    Ad[1:end-1,2:end] = Matrix(1.0I, padeOrderDen-1, padeOrderDen-1);
    for i=0:padeOrderDen-1
        a_i=(t_delay^(i-padeOrderDen)*(factorial(padeOrderNum+padeOrderDen-i)*factorial(padeOrderDen)/(factorial(i)*factorial(padeOrderDen-i))))/a_k;
        b_i=(t_delay^(i-padeOrderDen)*((-1)^i)*(factorial(padeOrderNum+padeOrderDen-i)*factorial(padeOrderNum)/(factorial(i)*factorial(padeOrderNum-i))))/a_k;
        Ad[end,i+1] =-a_i;
        Cd[i+1] = (b_i-(a_i*b_l));
    end
    # # Convert from controllable canonical form to diagonal form - This does not work as such a state-space representation is complex-valued
    # d_not_sorted=eigvals(Ad);
    # v_not_sorted=eigvecs(Ad);
    # d=zeros(ComplexF64,padeOrderDen,1);
    # v=zeros(ComplexF64,padeOrderDen,padeOrderDen);
    # matrix_ind=1;
    # # Sort the eigenvalues and eigenvectors
    # for i=1:padeOrderDen
    #     if sign(imag(d_not_sorted[i])==0) #Real eigenvalue, copy as is
    #         d[matrix_ind]=d_not_sorted[i];
    #         v[:,matrix_ind]=v_not_sorted[:,i];
    #         matrix_ind+=1;
    #     else # Complex eigenvalue
    #         if matrix_ind < padeOrderDen
    #             if sign(imag(d_not_sorted[i]))==-1
    #                 d[matrix_ind]    = real(d_not_sorted[i])     -imag(d_not_sorted[i])*im;
    #                 d[matrix_ind+1]  = real(d_not_sorted[i])     +imag(d_not_sorted[i])*im;
    #                 v[:,matrix_ind]  = real(v_not_sorted[:,i])   - imag(v_not_sorted[:,i])*im;
    #                 v[:,matrix_ind+1]= real(v_not_sorted[:,i])   + imag(v_not_sorted[:,i])*im;
    #             else
    #                 d[matrix_ind]    = real(d_not_sorted[i])     +imag(d_not_sorted[i])*im;
    #                 d[matrix_ind+1]  = real(d_not_sorted[i])     -imag(d_not_sorted[i])*im;
    #                 v[:,matrix_ind]  = real(v_not_sorted[:,i])   + imag(v_not_sorted[:,i])*im;
    #                 v[:,matrix_ind+1]= real(v_not_sorted[:,i])   - imag(v_not_sorted[:,i])*im;
    #             end
    #             matrix_ind+=2;
    #         end
    #     end
    # end
    # matrix_ind=1;
    # T_inv=zeros(padeOrderDen,padeOrderDen);
    # for i=1:padeOrderDen
    #     if imag(d[i])==0 #Real eigenvalue
    #         T_inv[:,matrix_ind]=v[:,i];
    #         matrix_ind+=1;
    #     else # Complex eigenvalue
    #         if matrix_ind < padeOrderDen
    #             T_inv[:,matrix_ind]  =real(v[:,i]);
    #             T_inv[:,matrix_ind+1]=imag(v[:,i]);
    #             matrix_ind+=2;
    #         end
    #     end
    # end
    # # Original implementation, resulting in a SingularException for Pade orders larger than 3.
    # # T=inv(T_inv);
    # # Ad=T*Ad*T_inv;
    # # Bd=T*Bd;
    # # Cd=Cd*T_inv;
    # # Alternative
    # sys = ss(Ad,Bd,Cd,Dd)
    # sys_modal = sys
    # Ad = sys_modal[1].A
    # Bd = sys_modal[1].B
    # Cd = sys_modal[1].C
    # # Concatenate the Pade matrices: nDelta_d, nDelta_q, nSigma_d, nSigma_q, nSigma_z
    # # A_Pade=cat(Ad,Ad,Ad,Ad,Ad;dims=[1,2]);
    # # B_Pade=cat(Bd,Bd,Bd,Bd,Bd;dims=[1,2]);
    # # C_Pade=cat(Cd,Cd,Cd,Cd,Cd;dims=[1,2]);
    # # D_Pade=cat(Dd,Dd,Dd,Dd,Dd;dims=[1,2]);
    # if numberVars == 1
    #     A_Pade=Ad;
    #     B_Pade=Bd;
    #     C_Pade=Cd;
    #     D_Pade=Dd;
    # elseif numberVars == 2
    #     A_Pade=cat(Ad,Ad;dims=[1,2]);
    #     B_Pade=cat(Bd,Bd;dims=[1,2]);
    #     C_Pade=cat(Cd,Cd;dims=[1,2]);
    #     D_Pade=cat(Dd,Dd;dims=[1,2]);
    # end




    return Ad,Bd,Cd,Dd
end


padDen = 5
timeD=200e-6

padNum = padDen;



timeDelayOut = timeDelayPadeMatrices(padNum,padDen,timeD,1);
                
A_delay = timeDelayOut[1];
B_delay = timeDelayOut[2];
C_delay = timeDelayOut[3];
D_delay = timeDelayOut[4];


println("Script done!")





